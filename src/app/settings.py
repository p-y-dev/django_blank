"""
Django settings for app project.

Generated by 'django-admin startproject' using Django 4.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import os
import tempfile
from datetime import timedelta
from pathlib import Path

from configurations import Configuration


class Base(Configuration):
    BASE_DIR = Path(__file__).resolve().parent.parent

    DEBUG = int(os.getenv('DEBUG', 1))
    SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-g0duk#i3ca^!disz20i(j-ufyr&5jb-b%+4gwoyn=8$nlzn_+*')
    ALLOWED_HOSTS = [os.getenv('ALLOWED_HOSTS', '*')]

    DATABASES = {
        'default': {
            'ENGINE': 'django.contrib.gis.db.backends.postgis',
            'NAME': os.getenv('POSTGRES_DB'),
            'USER': os.getenv('POSTGRES_USER'),
            'PASSWORD': os.getenv('POSTGRES_PASSWORD'),
            'HOST': os.getenv('DB_HOST'),
            'PORT': 5432,
        }
    }

    SIMPLE_JWT = {
        'ACCESS_TOKEN_LIFETIME': timedelta(minutes=int(os.getenv('ACCESS_TOKEN_LIFETIME_MIN', 60))),
        'REFRESH_TOKEN_LIFETIME': timedelta(minutes=int(os.getenv('REFRESH_TOKEN_LIFETIME_MIN', 360))),
        'ALGORITHM': 'HS256',
        'SIGNING_KEY': os.getenv('ACCESS_TOKEN_SIGNING_KEY'),
        'AUTH_HEADER_TYPES': ('Bearer',),
        'USER_ID_FIELD': 'id',
        'USER_ID_CLAIM': 'user_id',
        'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
        'TOKEN_TYPE_CLAIM': 'token_type',

        'JTI_CLAIM': 'jti',

        'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
        'SLIDING_TOKEN_LIFETIME': timedelta(minutes=int(os.getenv('ACCESS_TOKEN_LIFETIME_MIN', 60))),
        'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(minutes=int(os.getenv('REFRESH_TOKEN_LIFETIME_MIN', 360)))
    }

    # Confirm code
    LENGTH_CONFIRM_CODE = int(os.getenv('LENGTH_CONFIRM_CODE', 6))

    # Phone CONFIRM
    PHONEL_TEST_CONFIRM_CODE = int(os.getenv('PHONEL_TEST_CONFIRM_CODE', 0))
    PHONE_VER_TTL_HOURS = int(os.getenv('PHONE_VER_TTL_HOURS', 6))
    # Количество секунд для повторной отправки
    PHONE_CONFIRM_STEP_WAITING_SECONDS = int(os.getenv('PHONE_CONFIRM_STEP_WAITING_SECONDS', 30))
    # Максимальное количество отправок смс для подтверждения номера телефона
    PHONE_CONFIRM_CODE_COUNT_SEND = int(os.getenv('PHONE_CONFIRM_CODE_COUNT_SEND', 5))
    # Сколько должно пройти количества секунд, что бы дать возможность
    # отправлять коды подтверждения на номер, если количество попыток истрачено
    PHONE_CONFIRM_RESET_COUNT_SEND_SECONDS = int(os.getenv('PHONE_CONFIRM_RESET_COUNT_SEND_SECONDS', 86400))

    # EMAIL CONFIRM
    # Кол-во секунд за которое нужно подтвердить email
    EMAIL_VER_TTL_HOURS = int(os.getenv('EMAIL_VER_TTL_HOURS', 3))
    EMAIL_TEST_CONFIRM_CODE = int(os.getenv('EMAIL_TEST_CONFIRM_CODE', 0))

    # Application definition

    INSTALLED_APPS = [
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',

        'rest_framework',
        'corsheaders',
        'django_filters',
        'drf_yasg',
        'rest_framework_simplejwt',
        'phonenumber_field',

        'user',
        'confirm',
        'notification.emails',
        'notification.sms',
    ]

    USER_REGEX_PASSWORD = os.getenv('USER_REGEX_PASSWORD', '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d]{6,}$')

    REDIS_HOST = os.getenv('REDIS_HOST', 'localhost')
    # Celery
    CELERY_BROKER_URL = f'redis://{REDIS_HOST}:6379'
    CELERY_RESULT_BACKEND = f'redis://{REDIS_HOST}:6379'

    # from datetime import timedelta
    # from celery.schedules import crontab

    # CELERY_BEAT_SCHEDULE = {
    #     'sample_task': {
    #         'task': 'user.tasks.sample_task',
    #         'schedule': timedelta(seconds=3),
    #     },
    # }

    MIDDLEWARE = [
        'corsheaders.middleware.CorsMiddleware',
        'django.middleware.security.SecurityMiddleware',
        'django.contrib.sessions.middleware.SessionMiddleware',
        'django.middleware.common.CommonMiddleware',
        'django.middleware.csrf.CsrfViewMiddleware',
        'django.contrib.auth.middleware.AuthenticationMiddleware',
        'django.contrib.messages.middleware.MessageMiddleware',
        'django.middleware.clickjacking.XFrameOptionsMiddleware',
    ]

    ROOT_URLCONF = 'app.urls'

    TEMPLATES = [
        {
            'BACKEND': 'django.template.backends.django.DjangoTemplates',
            'DIRS': [],
            'APP_DIRS': True,
            'OPTIONS': {
                'context_processors': [
                    'django.template.context_processors.debug',
                    'django.template.context_processors.request',
                    'django.contrib.auth.context_processors.auth',
                    'django.contrib.messages.context_processors.messages',
                ],
            },
        },
    ]

    WSGI_APPLICATION = 'app.wsgi.application'

    # Password validation
    # https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

    AUTH_PASSWORD_VALIDATORS = [
        {
            'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
        },
    ]

    AUTH_USER_MODEL = 'user.User'

    # Internationalization
    # https://docs.djangoproject.com/en/4.1/topics/i18n/

    LANGUAGE_CODE = 'ru'
    TIME_ZONE = 'UTC'
    USE_I18N = True
    USE_L10N = True
    USE_TZ = True

    MEDIA_ROOT = '/media'
    MEDIA_URL = '/media/'

    STATICFILES_DIRS = ['/staticfiles']
    STATIC_ROOT = '/static'
    STATIC_URL = '/static/'

    # Default primary key field type
    # https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

    DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

    # DRF https://www.django-rest-framework.org/api-guide/settings/
    REST_FRAMEWORK = {
        'DEFAULT_RENDERER_CLASSES': [
            'rest_framework.renderers.JSONRenderer',
        ],
        'DEFAULT_PARSER_CLASSES': [
            'rest_framework.parsers.JSONParser',
            'rest_framework.parsers.FormParser',
            'rest_framework.parsers.MultiPartParser'
        ],
        'DEFAULT_AUTHENTICATION_CLASSES': (
            'rest_framework_simplejwt.authentication.JWTAuthentication',
            'rest_framework.authentication.SessionAuthentication',
        ),
        'DEFAULT_PERMISSION_CLASSES': (
            'rest_framework.permissions.IsAuthenticated',
        ),
        'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',
        'SEARCH_PARAM': 'search',
        'ORDERING_PARAM': 'ordering',
        'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
        'EXCEPTION_HANDLER': 'http_exceptions.custom_exception_handler'
    }

    # CORS headers https://pypi.org/project/django-cors-headers/
    CORS_ORIGIN_ALLOW_ALL = True
    CORS_ALLOW_CREDENTIALS = True
    CORS_ALLOW_HEADERS = [
        'content-type',
        'x-requested-with',
        'access-control-allow-headers',
        'access-control-allow-credentials',
        'accept',
        'accept-encoding',
        'authorization',
        'dnt',
        'origin',
        'user-agent',
        'x-csrftoken',
        'x-requested-with',
        'referer'
    ]
    CORS_ALLOW_METHODS = [
        'DELETE',
        'GET',
        'OPTIONS',
        'PATCH',
        'POST',
        'PUT',
    ]
    CORS_ORIGIN_WHITELIST = (
        'http://localhost:8080',
    )
    CORS_ORIGIN_REGEX_WHITELIST = (
        r'^http://192.168.1.\d{1,3}+\:8080$',
    )

    SWAGGER_SETTINGS = {
        'SECURITY_DEFINITIONS': {
            'Bearer': {
                'type': 'apiKey',
                'name': 'Authorization',
                'in': 'header'
          }
        }
    }


class Dev(Base):
    MEDIA_ROOT = tempfile.mkdtemp()
